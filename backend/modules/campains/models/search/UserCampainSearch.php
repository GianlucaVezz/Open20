<?php

namespace backend\modules\campains\models\search;


use open20\amos\admin\models\UserProfile;
use open20\amos\admin\models\UserProfileAgeGroup;
use open20\amos\admin\utility\UserProfileUtility;
use open20\amos\community\models\CommunityUserMm;
use open20\amos\comuni\models\IstatComuni;
use open20\amos\comuni\models\IstatProvince;
use open20\amos\events\AmosEvents;
use open20\amos\events\models\Event;
use open20\amos\events\utility\EventsUtility;
use yii\base\Model;
use yii\db\ActiveQuery;
use yii\db\Query;
use yii\helpers\ArrayHelper;
use backend\modules\campains\Module;
use yii\helpers\VarDumper;

class UserCampainSearch extends Model
{

    const FILTER_INCLUDE = 1;
    const FILTER_EXCLUDE = 2;


    /**
     *  [
     *      'include' => [
     *        'key' => 'value',
     *        'key' => 'value'
     *      ],
     *
     *      'exclude' => [
     *        'key' => 'value',
     *        'key' => 'value'
     *      ],
     *
     * ]
     *
     * @var array
     */
    public $includeExclude;
    public $field;
    public $value;

    /**
     *
     */
    public static function getListOfAttributes()
    {
        return [
            'gender' => Module::t('campains', 'Genere'),
            'user_profile_age_group_id' => Module::t('campains', "Fascia d'etÃ "),
            'location_id' => Module::t('campains', "Comune"),
        ];
    }

    /**
     * @param $field
     * @return array
     * @throws \yii\base\InvalidConfigException
     */
    public static function getAttributesValues($field)
    {
        switch ($field) {
            case 'gender':
                return [
                    'None' => \Yii::t('amosadmin', 'None'),
                    'Maschio' => \Yii::t('amosadmin', 'Maschio'),
                    'Femmina' => \Yii::t('amosadmin', 'Femmina'),
                ];
                break;
            case 'user_profile_age_group_id':
                $ages = UserProfileAgeGroup::find()->all();
                return ArrayHelper::map($ages, 'id', 'age_group');
                break;
            case 'location_id':
                $comuni = IstatComuni::find();
                $comuni
                    ->andWhere(['istat_regioni_id' => 3])
                    ->orderBy('istat_comuni.nome ASC');
               
                return ArrayHelper::map($comuni->all(), 'id', 'nome');
                break;
            
            default:
                return [];
        }
    }


    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
    }

    public function rules()
    {
        return [
            [['registered_invited', 'searchTags', 'event_id', 'type', 'tags', 'includeExclude', 'field', 'value'], 'safe']
        ];
    }


    public function addFiltersToQuery($query)
    {
        $includes = [];
        $excludes = [];
        if (is_array($this->includeExclude)) {
            foreach ($this->includeExclude as $key => $value) {
                if ($value == self::FILTER_INCLUDE) {
                    $includes [$this->field[$key]] [] = $this->value[$key];
                } else {
                    $excludes [] = ['attribute' => $this->field[$key], 'value' => $this->value[$key]];
                }
            }
        }

        // VarDumper::dump( $includes, $depth = 10, $highlight = false); echo '.........';
        // VarDumper::dump( $excludes, $depth = 10, $highlight = false);

        foreach ($includes as $attribute => $include) {
            $query = $this->filterInclude($query, $include, $attribute);
        }

        foreach ($excludes as $exclude) {
            $query = $this->filterExclude($query, $exclude);
        }

        // VarDumper::dump($query->createCommand()->rawSql,3, false); 

        return $query;

    }

//     /**
//      * @param $params
//      * @param bool $isCount
//      * @return int|string|ActiveQuery
//      * @throws \yii\base\InvalidConfigException
//      */
//     public function search($params, $isCount = true)
//     {
//         /** @var  $query ActiveQuery */
//         $query = UserProfile::find()
//             ->distinct()
//             ->andWhere(['user_profile.attivo' => 1])
//             ->andWhere(['NOT LIKE', 'user_profile.nome', UserProfileUtility::DELETED_ACCOUNT_NAME])
//             ->innerJoinWith('user');
       

// //        pr($params);
//         $this->load($params);
//         $event = Event::findOne($this->event_id);

//         $queryParticipants = UserProfile::find()
//             ->select('user_profile.id')
//             ->innerJoin('community_user_mm', 'community_user_mm.user_id = user_profile.user_id')
//             ->innerJoin('event_invitation', 'event_invitation.user_id = community_user_mm.user_id')
//             ->andWhere(['is', 'community_user_mm.deleted_at', null]);

//         if (!\Yii::$app->user->can('SUPER_USER_EVENT')) {
//             $query->innerJoin('event_group_referent_mm', 'event_group_referent_mm.user_id = user.id')
//                 ->andWhere(['event_group_referent_mm.event_group_referent_id' => $event->event_group_referent_id]);
//         }

//         $includes = [];
//         $excludes = [];
//         foreach ($this->includeExclude as $key => $value) {
//             if ($value == self::FILTER_INCLUDE) {
// //                $includes []= ['attribute' => $this->field[$key], 'value' => $this->value[$key]];
//                 $includes [$this->field[$key]] [] = $this->value[$key];
//             } else {
//                 $excludes [] = ['attribute' => $this->field[$key], 'value' => $this->value[$key]];
//             }
//         }


//         if ($this->type == self::SEARCH_TYPE_LIST_TAG) {
//             $queryTag = new Query();
//             $queryTag->from('entitys_tags_mm')
//                 ->innerJoin('event', 'event.id = entitys_tags_mm.record_id')
//                 ->andWhere(['entitys_tags_mm.tag_id' => $this->searchTags])
//                 ->andWhere(['classname' => Event::className()]);


//             if ($this->registered_invited == 2) {
//                 $query->innerJoin('community_user_mm', 'community_user_mm.user_id = user_profile.user_id')
//                     ->andWhere(['community_user_mm.status' => CommunityUserMm::STATUS_ACTIVE])
//                     ->andWhere(['IS', 'community_user_mm.deleted_at', null])
//                     ->andWhere(['community_user_mm.community_id' => $queryTag->select('event.community_id')])
//                     ->andWhere(['!=', 'community_user_mm.community_id', $event->community_id]);
//             } else {
//                 $query
//                     ->innerJoin('event_invitation_sent', 'event_invitation_sent.user_id = user_profile.user_id')
//                     ->innerJoin('event_internal_list', 'event_internal_list.id = event_invitation_sent.event_internal_list_id')
//                     ->andWhere(['IS', 'event_internal_list.deleted_at', null])
//                     ->andWhere(['IS', 'event_invitation_sent.deleted_at', null])
//                     ->andWhere(['!=', 'event_internal_list.event_id', $this->event_id])
//                     ->andWhere(['event_internal_list.event_id' => $queryTag->select('event.id')
//                     ]);
//             }


//             foreach ($excludes as $exclude) {
//                 $query = $this->filterExclude($query, $exclude);
//             }

//             foreach ($includes as $attribute => $include) {
//                 $query = $this->filterInclude($query, $include, $attribute);
//             }

//         } //-------  SEARCH ALL USERS
//         else {
//             foreach ($includes as $attribute => $include) {
//                 $query = $this->filterInclude($query, $include, $attribute);
//             }
//             foreach ($excludes as $exclude) {
//                 $query = $this->filterExclude($query, $exclude);
//             }
//         }

//         // ----- EXCLUDE USER ALREADY REGISTERD TO THE EVENT
//         $query->andWhere(['NOT IN', 'user_profile.id', $queryParticipants]);
// //        pr($query->createCommand()->rawSql);
// //        pr($queryParticipants->createCommand()->rawSql);DIE;
//         if ($isCount) {
//             return $query->count();
//         }
//         return $query;
//     }

    /**
     * @param $query ActiveQuery
     * @param $include
     */
    public function filterInclude($query, $include, $attribute)
    {

        if (count($include) > 0 && !empty($attribute)) {
            switch($attribute) {
                case 'user_profile_age_group_id': 

                    //VarDumper::dump( $include, $depth = 10, $highlight = false);
                    switch ($include[0]) {
                        case UserProfileAgeGroup::AGE_GROUP_18_25:
                            $query->andWhere('DATE(user_profile.nascita_data) <= DATE_SUB(NOW(), INTERVAL 18 YEAR)');
                            $query->andWhere('DATE(user_profile.nascita_data) >= DATE_SUB(NOW(), INTERVAL 25 YEAR)');
                            break;
                        
                        case  UserProfileAgeGroup::AGE_GROUP_36_35:
                            $query->andWhere('DATE(user_profile.nascita_data) <= DATE_SUB(NOW(), INTERVAL 26 YEAR)');
                            $query->andWhere('DATE(user_profile.nascita_data) >= DATE_SUB(NOW(), INTERVAL 35 YEAR)');
                            break;

                        case UserProfileAgeGroup::AGE_GROUP_36_45:
                            $query->andWhere('DATE(user_profile.nascita_data) <= DATE_SUB(NOW(), INTERVAL 36 YEAR)');
                            $query->andWhere('DATE(user_profile.nascita_data) >=  DATE_SUB(NOW(), INTERVAL 45 YEAR)');
                            break;

                        case UserProfileAgeGroup::AGE_GROUP_46_55:
                            $query->andWhere('DATE(user_profile.nascita_data) <= DATE_SUB(NOW(), INTERVAL 46 YEAR)');
                            $query->andWhere('DATE(user_profile.nascita_data) >=  DATE_SUB(NOW(), INTERVAL 55 YEAR)');
                            break;
                        
                        case UserProfileAgeGroup::AGE_GROUP_56_65:
                            $query->andWhere('DATE(user_profile.nascita_data) <= DATE_SUB(NOW(), INTERVAL 56 YEAR)');
                            $query->andWhere('DATE(user_profile.nascita_data) >=  DATE_SUB(NOW(), INTERVAL 65 YEAR)');
                            break;
                        
                        case UserProfileAgeGroup::AGE_GROUP_OVER_65:
                            $query->andWhere('DATE(user_profile.nascita_data) <= DATE_SUB(NOW(), INTERVAL 65 YEAR)');
                            break;
                    }
                    break;

                case 'location_id':  
                    $query->andWhere(['user_profile.comune_residenza_id' => $include[0]]);
                    break;

                case 'gender':  
                    $query->andWhere(['user_profile.sesso' => ($include[0] == 'None')? null: $include[0]]);
                    break;
            }
            
        }
        
        return $query;
    }


    // /**
    //  * @param $query ActiveQuery
    //  * @param $exclude
    //  * @return mixed
    //  */
    public function filterExclude($query, $exclude)
    {
        
        switch($exclude['attribute']) {
            case 'user_profile_age_group_id': 

                //VarDumper::dump( $include, $depth = 10, $highlight = false);
                switch ($exclude['value']) {
                    case UserProfileAgeGroup::AGE_GROUP_18_25:
                        $query->andWhere('DATE(user_profile.nascita_data) >= DATE_SUB(NOW(), INTERVAL 18 YEAR)');
                        $query->andWhere('DATE(user_profile.nascita_data) <= DATE_SUB(NOW(), INTERVAL 25 YEAR)');
                        break;
                    
                    case  UserProfileAgeGroup::AGE_GROUP_36_35:
                        $query->andWhere('DATE(user_profile.nascita_data) >= DATE_SUB(NOW(), INTERVAL 26 YEAR)');
                        $query->andWhere('DATE(user_profile.nascita_data) <= DATE_SUB(NOW(), INTERVAL 35 YEAR)');
                        break;

                    case UserProfileAgeGroup::AGE_GROUP_36_45:
                        $query->andWhere('DATE(user_profile.nascita_data) >= DATE_SUB(NOW(), INTERVAL 36 YEAR)');
                        $query->andWhere('DATE(user_profile.nascita_data) <=  DATE_SUB(NOW(), INTERVAL 45 YEAR)');
                        break;

                    case UserProfileAgeGroup::AGE_GROUP_46_55:
                        $query->andWhere('DATE(user_profile.nascita_data) >= DATE_SUB(NOW(), INTERVAL 46 YEAR)');
                        $query->andWhere('DATE(user_profile.nascita_data) <=  DATE_SUB(NOW(), INTERVAL 55 YEAR)');
                        break;
                    
                    case UserProfileAgeGroup::AGE_GROUP_56_65:
                        $query->andWhere('DATE(user_profile.nascita_data) >= DATE_SUB(NOW(), INTERVAL 56 YEAR)');
                        $query->andWhere('DATE(user_profile.nascita_data) <=  DATE_SUB(NOW(), INTERVAL 65 YEAR)');
                        break;
                    
                    case UserProfileAgeGroup::AGE_GROUP_OVER_65:
                        $query->andWhere('DATE(user_profile.nascita_data) >= DATE_SUB(NOW(), INTERVAL 65 YEAR)');
                        break;
                }
                break;

            case 'location_id':  
                $query->andWhere(['<>', 'user_profile.comune_residenza_id', $exclude['value']]);
                break;

            case 'gender':  
                $query->andWhere(['<>', 'user_profile.sesso', $exclude['value']]);
                break;
        }
            
        
        return $query;
    }

}