<?php

namespace lispa\amos\projectmanagement\controllers;

use lispa\amos\core\controllers\CrudController;
use lispa\amos\core\helpers\Html;
use lispa\amos\core\icons\AmosIcons;
use lispa\amos\projectmanagement\models\Projects;
use lispa\amos\projectmanagement\models\search\ProjectsSearch;
use lispa\amos\projectmanagement\Module;

/**
 * This is the class for controller "ProjectsController".
 */
class ProjectsGanttController extends CrudController
{

    public function actionDetail($id = null)
    {
        $this->setUpLayout('list');

        $this->setDataProvider($this->getModelSearch()->search(\Yii::$app->request->getQueryParams()));
        $model = $this->findModel($id);

        return $this->render('index', [
            'dataProvider' => $this->getDataProvider(),
            'model' => $model,
            'currentView' => $this->getCurrentView(),
            'availableViews' => $this->getAvailableViews(),
            'url' => ($this->url) ? $this->url : null,
            'parametro' => ($this->parametro) ? $this->parametro : null
        ]);

    }

    public function actionIndex($layout = null)
    {
        $this->setDataProvider($this->getModelSearch()->search(\Yii::$app->request->getQueryParams()));
        return parent::actionIndex($layout); // TODO: Change the autogenerated stub
    }

    /**
     * @var string $layout
     */
    public $layout = 'list';

    /**
     * @inheritdoc
     */
    public function init()
    {
        $this->setModelObj(new Projects());
        $this->setModelSearch(new ProjectsSearch());


        $this->setAvailableViews([
            'grid' => [
                'name' => 'grid',
                'label' => Module::t('amoscore', '{iconaTabella}' . Html::tag('p', Module::t('amoscore', 'Table')),
                    [
                        'iconaTabella' => AmosIcons::show('view-list-alt')
                    ]),
                'url' => '?currentView=grid'
            ],
            'gantt' => [
                'name' => 'gantt',
                'label' => Module::t('amoscore', '{iconaGantt}' . Html::tag('p', Module::t('amoscore', 'Gantt')), [
                    'iconaGantt' => AmosIcons::show('view-list')
                ]),
                'url' => '?currentView=gantt'
            ],
            /*
                'icon' => [
                    'name' => 'icon',
                    'label' => Module::t('amoscore', '{iconaElenco}'.Html::tag('p',Module::t('amoscore', 'Icons')), [
                        'iconaElenco' => AmosIcons::show('grid')
                    ]),
                    'url' => '?currentView=icon'
                ],
                'map' => [
                    'name' => 'map',
                    'label' => Module::t('amoscore', '{iconaMappa}'.Html::tag('p',Module::t('amoscore', 'Map')), [
                        'iconaMappa' => AmosIcons::show('map')
                    ]),
                    'url' => '?currentView=map'
                ],
                'calendar' => [
                    'name' => 'calendar',
                    'intestazione' => '', //codice HTML per l'intestazione che verrÃ  caricato prima del calendario,
                                          //per esempio si puÃ² inserire una funzione $model->getHtmlIntestazione() creata ad hoc
                    'label' => Module::t('amoscore', '{iconaCalendario}'.Html::tag('p',Module::t('amoscore', 'Calendario')), [
                        'iconaMappa' => AmosIcons::show('calendar')
                    ]),
                    'url' => '?currentView=calendar'
                ],*/
        ]);

        parent::init();
        $this->setUpLayout();
    }

    /**
     * @param null $layout
     * @return bool
     */
    public function setUpLayout($layout = null){
        if ($layout === false){
            $this->layout = false;
            return true;
        }
        $module = \Yii::$app->getModule('layout');
        if(empty($module)){
            $this->layout =  '@vendor/lispa/amos-core/views/layouts/' . (!empty($layout) ? $layout : $this->layout);
            return true;
        }
        $this->layout = (!empty($layout)) ? $layout : $this->layout;
        return true;
    }
}
